import os
import hashlib
import requests

class MalwareScanner:
    def __init__(self):
        # Set API Key secara langsung
        self.api_key = "c5535faea3c9f17c31a1a0c54a63fb64a8de4eae2997b06d4a68d145efcb4a99"
        self.virustotal_api_endpoint = "https://www.virustotal.com/api/v3/files/{}"
        
        # Menampilkan banner saat objek dibuat
        self.display_banner()

    def hash_file(self, file_path):
        """Menghasilkan hash MD5 dari file."""
        hasher = hashlib.md5()
        with open(file_path, 'rb') as f:
            buffer_size = 8192
            for buffer in iter(lambda: f.read(buffer_size), b''):
                hasher.update(buffer)
        return hasher.hexdigest()

    def scan_directory(self, directory_path):
        """Menscan dan mengambil hash dari semua file di direktori."""
        file_hashes = {}
        for root, dirs, files in os.walk(directory_path):
            for file_name in files:
                file_path = os.path.join(root, file_name)
                file_hash = self.hash_file(file_path)
                file_hashes[file_path] = file_hash
        return file_hashes

    def scan_virustotal(self, file_hash):
        """Mengirim hash ke VirusTotal untuk pemindaian."""
        url = self.virustotal_api_endpoint.format(file_hash)
        headers = {
            "accept": "application/json",
            "x-apikey": self.api_key
        }
        response = requests.get(url, headers=headers)
        return response.json()

    def delete_file(self, file_path):
        """Menghapus file."""
        try:
            os.remove(file_path)
            print(f"File deleted: {file_path}")
        except Exception as e:
            print(f"Error deleting file {file_path}: {e}")

    def perform_scan(self, directory_path):
        """Melakukan pemindaian penuh dan menghapus file yang terdeteksi sebagai malware."""
        # Menscan direktori dan mendapatkan hash file
        hashes = self.scan_directory(directory_path)

        # Menampilkan hasil scan dan pemindaian VirusTotal
        for file_path, file_hash in hashes.items():
            print(f"File: {file_path}\nHash: {file_hash}")

            # Memeriksa hash menggunakan VirusTotal
            virustotal_result = self.scan_virustotal(file_hash)

            # Menampilkan hasil pemindaian VirusTotal
            if "data" in virustotal_result and virustotal_result["data"]["attributes"]["last_analysis_stats"]["malicious"] > 0:
                print("Malware Detected")

        # Setelah selesai memindai seluruh direktori
        user_input = input("Do you want to delete detected malware files? (yes/no): ").lower()
        if user_input == "yes":
            self.delete_detected_malware_files(hashes)

        print("Scanning process completed.")

    def delete_detected_malware_files(self, hashes):
        """Menghapus hanya file yang terdeteksi sebagai malware."""
        for file_path, file_hash in hashes.items():
            virustotal_result = self.scan_virustotal(file_hash)
            if "data" in virustotal_result and virustotal_result["data"]["attributes"]["last_analysis_stats"]["malicious"] > 0:
                self.delete_file(file_path)

    def display_banner(self, directory_path=None):
        """Menampilkan banner."""
        banner = """
        ███▄ ▄███▓ ▄▄▄       ██▓     █     █░ ▄▄▄       ██▀███  ▓█████      ██████  ▄████▄   ▄▄▄       ███▄    █  ███▄    █ ▓█████  ██▀███  
        ▓██▒▀█▀ ██▒▒████▄    ▓██▒    ▓█░ █ ░█░▒████▄    ▓██ ▒ ██▒▓█   ▀    ▒██    ▒ ▒██▀ ▀█  ▒████▄     ██ ▀█   █  ██ ▀█   █ ▓█   ▀ ▓██ ▒ ██▒
        ▓██    ▓██░▒██  ▀█▄  ▒██░    ▒█░ █ ░█ ▒██  ▀█▄  ▓██ ░▄█ ▒▒███      ░ ▓██▄   ▒▓█    ▄ ▒██  ▀█▄  ▓██  ▀█ ██▒▓██  ▀█ ██▒▒███   ▓██ ░▄█ ▒
        ▒██    ▒██ ░██▄▄▄▄██ ▒██░    ░█░ █ ░█ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓█  ▄      ▒   ██▒▒▓▓▄ ▄██▒░██▄▄▄▄██ ▓██▒  ▐▌██▒▓██▒  ▐▌██▒▒▓█  ▄ ▒██▀▀█▄  
        ▒██▒   ░██▒ ▓█   ▓██▒░██████▒░░██▒██▓  ▓█   ▓██▒░██▓ ▒██▒░▒████▒   ▒██████▒▒▒ ▓███▀ ░ ▓█   ▓██▒▒██░   ▓██░▒██░   ▓██░░▒████▒░██▓ ▒██▒
        ░ ▒░   ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒▓ ░▒▓░░░ ▒░ ░   ▒ ▒▓▒ ▒ ░░ ░▒ ▒  ░ ▒▒   ▓▒█░░ ▒░   ▒ ▒ ░ ▒░   ▒ ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░
        ░  ░      ░  ▒   ▒▒ ░░ ░ ▒  ░  ▒ ░ ░    ▒   ▒▒ ░  ░▒ ░ ▒░ ░ ░  ░   ░ ░▒  ░ ░  ░  ▒     ▒   ▒▒ ░░ ░░   ░ ▒░░ ░░   ░ ▒░ ░ ░  ░  ░▒ ░ ▒░
        ░      ░     ░   ▒     ░ ░     ░   ░    ░   ▒     ░░   ░    ░      ░  ░  ░  ░          ░   ▒      ░   ░ ░    ░   ░ ░    ░     ░░   ░ 
               ░         ░  ░    ░  ░    ░          ░  ░   ░        ░  ░         ░  ░ ░            ░  ░         ░          ░    ░  ░   ░     
                                                                                    ░                                                         
        """
        if directory_path:
            print(f"Scanning directory: {directory_path}")
        print(banner)

if __name__ == "__main__":
    # Menggunakan direktori kerja saat ini
    directory_to_scan = input("Enter the directory path to scan (press Enter to use current directory): ")

    # Menggunakan direktori kerja saat ini jika pengguna tidak memasukkan direktori
    if not directory_to_scan:
        directory_to_scan = os.getcwd()

    # Membuat objek MalwareScanner dengan kunci API yang sudah ditetapkan
    malware_scanner = MalwareScanner()

    # Menjalankan pemindaian
    malware_scanner.perform_scan(directory_to_scan)
